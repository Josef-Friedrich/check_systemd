"""
This type stub file was generated by pyright.
"""

"""Functions and classes to interface with the system.

This module contains the :class:`Runtime` class that handles exceptions,
timeouts and logging. Plugin authors should not use Runtime directly,
but decorate the plugin's main function with :func:`~.runtime.guarded`.
"""

def guarded(
    original_function=..., verbose=...
):  # -> ((*args: Unknown, **kwds: Unknown) -> Unknown) | ((func: Unknown) -> ((*args: Unknown, **kwds: Unknown) -> Unknown)):
    """Runs a function nagiosplugin's Runtime environment.

    `guarded` makes the decorated function behave correctly with respect
    to the Nagios plugin API if it aborts with an uncaught exception or
    a timeout. It exits with an *unknown* exit code and prints a
    traceback in a format acceptable by Nagios.

    This function should be used as a decorator for the script's `main`
    function.

    :param verbose: Optional keyword parameter to control verbosity
        level during early execution (before
        :meth:`~nagiosplugin.Check.main` has been called). For example,
        use `@guarded(verbose=0)` to turn tracebacks in that phase off.
    """
    ...

class Runtime:
    instance = ...
    check = ...
    _verbose = ...
    timeout = ...
    logchan = ...
    output = ...
    stdout = ...
    exitcode = ...
    def __new__(cls): ...
    def __init__(self) -> None: ...
    @property
    def verbose(self): ...
    @verbose.setter
    def verbose(self, verbose): ...
    def run(self, check): ...
    def execute(self, check, verbose=..., timeout=...): ...
    def sysexit(self): ...
